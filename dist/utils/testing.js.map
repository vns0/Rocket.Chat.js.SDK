{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../src/utils/testing.ts"],"names":[],"mappings":"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","sourcesContent":["import { get, post, login, logout } from '../lib/api'\r\nimport { apiUser, botUser, mockUser } from './config'\r\nimport {\r\n  IMessageAPI,\r\n  IMessageUpdateAPI,\r\n  IMessageResultAPI,\r\n  INewUserAPI,\r\n  IUserResultAPI,\r\n  IRoomResultAPI,\r\n  IChannelResultAPI,\r\n  IGroupResultAPI,\r\n  IMessageReceiptAPI\r\n} from './interfaces'\r\nimport { IMessage } from '../config/messageInterfaces'\r\n\r\n/** Define common attributes for DRY tests */\r\nexport const testChannelName = 'tests'\r\nexport const testPrivateName = 'p-tests'\r\n\r\n/** Get information about a user */\r\nexport async function userInfo (username: string): Promise<IUserResultAPI> {\r\n  return get('users.info', { username }, true)\r\n}\r\n\r\n/** Create a user and catch the error if they exist already */\r\nexport async function createUser (user: INewUserAPI): Promise<IUserResultAPI> {\r\n  return post('users.create', user, true, /already in use/i)\r\n}\r\n\r\n/** Get information about a channel */\r\nexport async function channelInfo (query: { roomName?: string, roomId?: string }): Promise<IChannelResultAPI> {\r\n  return get('channels.info', query, true)\r\n}\r\n\r\n/** Get information about a private group */\r\nexport async function privateInfo (query: { roomName?: string, roomId?: string }): Promise<IGroupResultAPI> {\r\n  return get('groups.info', query, true)\r\n}\r\n\r\n/** Get the last messages sent to a channel (in last 10 minutes) */\r\nexport async function lastMessages (roomId: string, count: number = 1): Promise<IMessage[]> {\r\n  const now = new Date()\r\n  const latest = now.toISOString()\r\n  const oldest = new Date(now.setMinutes(now.getMinutes() - 10)).toISOString()\r\n  return (await get('channels.history', { roomId, latest, oldest, count })).messages\r\n}\r\n\r\n/** Create a room for tests and catch the error if it exists already */\r\nexport async function createChannel (\r\n  name: string,\r\n  members: string[] = [],\r\n  readOnly: boolean = false\r\n): Promise<IChannelResultAPI> {\r\n  return post('channels.create', { name, members, readOnly }, true)\r\n}\r\n\r\n/** Create a private group / room and catch if exists already */\r\nexport async function createPrivate (\r\n  name: string,\r\n  members: string[] = [],\r\n  readOnly: boolean = false\r\n): Promise<IGroupResultAPI> {\r\n  return post('groups.create', { name, members, readOnly }, true)\r\n}\r\n\r\n/** Send message from mock user to channel for tests to listen and respond */\r\n/** @todo Sometimes the post request completes before the change event emits\r\n *        the message to the streamer. That's why the interval is used for proof\r\n *        of receipt. It would be better for the endpoint to not resolve until\r\n *        server side handling is complete. Would require PR to core.\r\n */\r\nexport async function sendFromUser (payload: any): Promise<IMessageResultAPI> {\r\n  const user = await login({ username: mockUser.username, password: mockUser.password })\r\n  const endpoint = (payload.roomId && payload.roomId.indexOf(user.data.userId) !== -1)\r\n    ? 'dm.history'\r\n    : 'channels.history'\r\n  const roomId = (payload.roomId)\r\n    ? payload.roomId\r\n    : (await channelInfo({ roomName: testChannelName })).channel._id\r\n  const messageDefaults: IMessageAPI = { roomId }\r\n  const data: IMessageAPI = Object.assign({}, messageDefaults, payload)\r\n  const oldest = new Date().toISOString()\r\n  const result = await post('chat.postMessage', data, true)\r\n  const proof = new Promise((resolve, reject) => {\r\n    let looked = 0\r\n    const look = setInterval(async () => {\r\n      const { messages } = await get(endpoint, { roomId, oldest })\r\n      const found = messages.some((message: IMessageReceiptAPI) => {\r\n        return result.message._id === message._id\r\n      })\r\n      if (found || looked > 10) {\r\n        clearInterval(look)\r\n        if (found) resolve()\r\n        else reject('API send from user, proof of receipt timeout')\r\n      }\r\n      looked++\r\n    }, 100)\r\n  })\r\n  await proof\r\n  return result\r\n}\r\n\r\n/** Leave user from room, to generate `ul` message (test channel by default) */\r\nexport async function leaveUser (room: { id?: string, name?: string } = {}): Promise<Boolean> {\r\n  await login({ username: mockUser.username, password: mockUser.password })\r\n  if (!room.id && !room.name) room.name = testChannelName\r\n  const roomId = (room.id)\r\n    ? room.id\r\n    : (await channelInfo({ roomName: room.name })).channel._id\r\n  return post('channels.leave', { roomId })\r\n}\r\n\r\n/** Invite user to room, to generate `au` message (test channel by default) */\r\nexport async function inviteUser (room: { id?: string, name?: string } = {}): Promise<Boolean> {\r\n  let mockInfo = await userInfo(mockUser.username)\r\n  await login({ username: apiUser.username, password: apiUser.password })\r\n  if (!room.id && !room.name) room.name = testChannelName\r\n  const roomId = (room.id)\r\n    ? room.id\r\n    : (await channelInfo({ roomName: room.name })).channel._id\r\n  return post('channels.invite', { userId: mockInfo.user._id, roomId })\r\n}\r\n\r\n/** @todo : Join user into room (enter) to generate `uj` message type. */\r\n\r\n/** Update message sent from mock user */\r\nexport async function updateFromUser (payload: IMessageUpdateAPI): Promise<IMessageResultAPI> {\r\n  await login({ username: mockUser.username, password: mockUser.password })\r\n  return post('chat.update', payload, true)\r\n}\r\n\r\n/** Create a direct message session with the mock user */\r\nexport async function setupDirectFromUser (): Promise<IRoomResultAPI> {\r\n  await login({ username: mockUser.username, password: mockUser.password })\r\n  return post('im.create', { username: botUser.username }, true)\r\n}\r\n\r\n/** Initialise testing instance with the required users for SDK/bot tests */\r\nexport async function setup () {\r\n  console.log('\\nPreparing instance for tests...')\r\n  try {\r\n    // Verify API user can login\r\n    const loginInfo = await login(apiUser)\r\n    if (loginInfo.status !== 'success') {\r\n      throw new Error(`API user (${apiUser.username}) could not login`)\r\n    } else {\r\n      console.log(`API user (${apiUser.username}) logged in`)\r\n    }\r\n\r\n    // Verify or create user for bot\r\n    let botInfo = await userInfo(botUser.username)\r\n    if (!botInfo || !botInfo.success) {\r\n      console.log(`Bot user (${botUser.username}) not found`)\r\n      botInfo = await createUser(botUser)\r\n      if (!botInfo.success) {\r\n        throw new Error(`Bot user (${botUser.username}) could not be created`)\r\n      } else {\r\n        console.log(`Bot user (${botUser.username}) created`)\r\n      }\r\n    } else {\r\n      console.log(`Bot user (${botUser.username}) exists`)\r\n    }\r\n\r\n    // Verify or create mock user for talking to bot\r\n    let mockInfo = await userInfo(mockUser.username)\r\n    if (!mockInfo || !mockInfo.success) {\r\n      console.log(`Mock user (${mockUser.username}) not found`)\r\n      mockInfo = await createUser(mockUser)\r\n      if (!mockInfo.success) {\r\n        throw new Error(`Mock user (${mockUser.username}) could not be created`)\r\n      } else {\r\n        console.log(`Mock user (${mockUser.username}) created`)\r\n      }\r\n    } else {\r\n      console.log(`Mock user (${mockUser.username}) exists`)\r\n    }\r\n\r\n    // Verify or create channel for tests\r\n    let testChannelInfo = await channelInfo({ roomName: testChannelName })\r\n    if (!testChannelInfo || !testChannelInfo.success) {\r\n      console.log(`Test channel (${testChannelName}) not found`)\r\n      testChannelInfo = await createChannel(testChannelName, [\r\n        apiUser.username, botUser.username, mockUser.username\r\n      ])\r\n      if (!testChannelInfo.success) {\r\n        throw new Error(`Test channel (${testChannelName}) could not be created`)\r\n      } else {\r\n        console.log(`Test channel (${testChannelName}) created`)\r\n      }\r\n    } else {\r\n      console.log(`Test channel (${testChannelName}) exists`)\r\n    }\r\n\r\n    // Verify or create private room for tests\r\n    let testPrivateInfo = await privateInfo({ roomName: testPrivateName })\r\n    if (!testPrivateInfo || !testPrivateInfo.success) {\r\n      console.log(`Test private room (${testPrivateName}) not found`)\r\n      testPrivateInfo = await createPrivate(testPrivateName, [\r\n        apiUser.username, botUser.username, mockUser.username\r\n      ])\r\n      if (!testPrivateInfo.success) {\r\n        throw new Error(`Test private room (${testPrivateName}) could not be created`)\r\n      } else {\r\n        console.log(`Test private room (${testPrivateName}) created`)\r\n      }\r\n    } else {\r\n      console.log(`Test private room (${testPrivateName}) exists`)\r\n    }\r\n\r\n    await logout()\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n}\r\n"]}
{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/lib/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Client } from 'node-rest-client'\r\nimport * as settings from './settings'\r\nimport { logger } from './log'\r\nimport { IUserAPI } from '../utils/interfaces'\r\n\r\n/** Result object from an API login */\r\nexport interface ILoginResultAPI {\r\n  status: string // e.g. 'success'\r\n  data: { authToken: string, userId: string }\r\n}\r\n\r\n/** Structure for passing and keeping login credentials */\r\nexport interface ILoginCredentials {\r\n  username: string,\r\n  password: string\r\n}\r\nexport let currentLogin: {\r\n  username: string,\r\n  userId: string,\r\n  authToken: string,\r\n  result: ILoginResultAPI\r\n} | null = null\r\n\r\n/** Check for existing login */\r\nexport function loggedIn (): boolean {\r\n  return (currentLogin !== null)\r\n}\r\n\r\n/** Initialise client and configs */\r\nexport const client = new Client()\r\nexport const host = settings.host\r\n\r\n/**\r\n * Prepend protocol (or put back if removed from env settings for driver)\r\n * Hard code endpoint prefix, because all syntax depends on this version\r\n */\r\nexport const url = ((host.indexOf('http') === -1)\r\n  ? host.replace(/^(\\/\\/)?/, 'http://')\r\n  : host) + '/api/v1/'\r\n\r\n/** Convert payload data to query string for GET requests */\r\nexport function getQueryString (data: any) {\r\n  if (!data || typeof data !== 'object' || !Object.keys(data).length) return ''\r\n  return '?' + Object.keys(data).map((k) => {\r\n    const value = (typeof data[k] === 'object')\r\n      ? JSON.stringify(data[k])\r\n      : encodeURIComponent(data[k])\r\n    return `${encodeURIComponent(k)}=${value}`\r\n  }).join('&')\r\n}\r\n\r\n/** Setup default headers with empty auth for now */\r\nexport const basicHeaders = { 'Content-Type': 'application/json' }\r\nexport const authHeaders = { 'X-Auth-Token': '', 'X-User-Id': '' }\r\n\r\n/** Populate auth headers (from response data on login) */\r\nexport function setAuth (authData: {authToken: string, userId: string}) {\r\n  authHeaders['X-Auth-Token'] = authData.authToken\r\n  authHeaders['X-User-Id'] = authData.userId\r\n}\r\n\r\n/** Join basic headers with auth headers if required */\r\nexport function getHeaders (authRequired = false) {\r\n  if (!authRequired) return basicHeaders\r\n  if (\r\n    (!('X-Auth-Token' in authHeaders) || !('X-User-Id' in authHeaders)) ||\r\n    authHeaders['X-Auth-Token'] === '' ||\r\n    authHeaders['X-User-Id'] === ''\r\n  ) {\r\n    throw new Error('Auth required endpoint cannot be called before login')\r\n  }\r\n  return Object.assign({}, basicHeaders, authHeaders)\r\n}\r\n\r\n/** Clear headers so they can't be used without logging in again */\r\nexport function clearHeaders () {\r\n  delete authHeaders['X-Auth-Token']\r\n  delete authHeaders['X-User-Id']\r\n}\r\n\r\n/** Check result data for success, allowing override to ignore some errors */\r\nexport function success (result: any, ignore?: RegExp) {\r\n  return (\r\n    (\r\n      typeof result.error === 'undefined' &&\r\n      typeof result.status === 'undefined' &&\r\n      typeof result.success === 'undefined'\r\n    ) ||\r\n    (result.status && result.status === 'success') ||\r\n    (result.success && result.success === true) ||\r\n    (ignore && result.error && !ignore.test(result.error))\r\n  ) ? true : false\r\n}\r\n\r\n/**\r\n * Do a POST request to an API endpoint.\r\n * If it needs a token, login first (with defaults) to set auth headers.\r\n * @todo Look at why some errors return HTML (caught as buffer) instead of JSON\r\n * @param endpoint The API endpoint (including version) e.g. `chat.update`\r\n * @param data     Payload for POST request to endpoint\r\n * @param auth     Require auth headers for endpoint, default true\r\n * @param ignore   Allows certain matching error messages to not count as errors\r\n */\r\nexport async function post (\r\n  endpoint: string,\r\n  data: any,\r\n  auth: boolean = true,\r\n  ignore?: RegExp\r\n): Promise<any> {\r\n  try {\r\n    logger.debug(`[API] POST: ${endpoint}`, JSON.stringify(data))\r\n    if (auth && !loggedIn()) await login()\r\n    let headers = getHeaders(auth)\r\n    const result = await new Promise((resolve, reject) => {\r\n      client.post(url + endpoint, { headers, data }, (result: any) => {\r\n        if (Buffer.isBuffer(result)) reject('Result was buffer (HTML, not JSON)')\r\n        else if (!success(result, ignore)) reject(result)\r\n        else resolve(result)\r\n      }).on('error', (err: Error) => reject(err))\r\n    })\r\n    logger.debug('[API] POST result:', result)\r\n    return result\r\n  } catch (err) {\r\n    console.error(err)\r\n    logger.error(`[API] POST error (${endpoint}):`, err)\r\n  }\r\n}\r\n\r\n/**\r\n * Do a GET request to an API endpoint\r\n * @param endpoint   The API endpoint (including version) e.g. `users.info`\r\n * @param data       Object to serialise for GET request query string\r\n * @param auth       Require auth headers for endpoint, default true\r\n * @param ignore     Allows certain matching error messages to not count as errors\r\n */\r\nexport async function get (\r\n  endpoint: string,\r\n  data?: any,\r\n  auth: boolean = true,\r\n  ignore?: RegExp\r\n): Promise<any> {\r\n  try {\r\n    logger.debug(`[API] GET: ${endpoint}`, data)\r\n    if (auth && !loggedIn()) await login()\r\n    let headers = getHeaders(auth)\r\n    const query = getQueryString(data)\r\n    const result = await new Promise((resolve, reject) => {\r\n      client.get(url + endpoint + query, { headers }, (result: any) => {\r\n        if (Buffer.isBuffer(result)) reject('Result was buffer (HTML, not JSON)')\r\n        else if (!success(result, ignore)) reject(result)\r\n        else resolve(result)\r\n      }).on('error', (err: Error) => reject(err))\r\n    })\r\n    logger.debug('[API] GET result:', result)\r\n    return result\r\n  } catch (err) {\r\n    logger.error(`[API] GET error (${endpoint}):`, err)\r\n  }\r\n}\r\n\r\n/**\r\n * Login a user for further API calls\r\n * Result should come back with a token, to authorise following requests.\r\n * Use env default credentials, unless overridden by login arguments.\r\n */\r\nexport async function login (user: ILoginCredentials = {\r\n  username: settings.username,\r\n  password: settings.password\r\n}): Promise<ILoginResultAPI> {\r\n  logger.info(`[API] Logging in ${user.username}`)\r\n  if (currentLogin !== null) {\r\n    logger.debug(`[API] Already logged in`)\r\n    if (currentLogin.username === user.username) {\r\n      return currentLogin.result\r\n    } else {\r\n      await logout()\r\n    }\r\n  }\r\n  const result = await post('login', user, false)\r\n  if (result && result.data && result.data.authToken) {\r\n    currentLogin = {\r\n      result: result, // keep to return if login requested again for same user\r\n      username: user.username, // keep to compare with following login attempt\r\n      authToken: result.data.authToken,\r\n      userId: result.data.userId\r\n    }\r\n    setAuth(currentLogin)\r\n    logger.info(`[API] Logged in ID ${ currentLogin.userId }`)\r\n    return result\r\n  } else {\r\n    throw new Error(`[API] Login failed for ${user.username}`)\r\n  }\r\n}\r\n\r\n/** Logout a user at end of API calls */\r\nexport function logout () {\r\n  if (currentLogin === null) {\r\n    logger.debug(`[API] Already logged out`)\r\n    return Promise.resolve()\r\n  }\r\n  logger.info(`[API] Logging out ${ currentLogin.username }`)\r\n  return get('logout', null, true).then(() => {\r\n    clearHeaders()\r\n    currentLogin = null\r\n  })\r\n}\r\n\r\n/** Defaults for user queries */\r\nexport const userFields = { name: 1, username: 1, status: 1, type: 1 }\r\n\r\n/** Query helpers for user collection requests */\r\nexport const users: any = {\r\n  all: (fields: any = userFields) => get('users.list', { fields }).then((r) => r.users),\r\n  allNames: () => get('users.list', { fields: { 'username': 1 } }).then((r) => r.users.map((u: IUserAPI) => u.username)),\r\n  allIDs: () => get('users.list', { fields: { '_id': 1 } }).then((r) => r.users.map((u: IUserAPI) => u._id)),\r\n  online: (fields: any = userFields) => get('users.list', { fields, query: { 'status': { $ne: 'offline' } } }).then((r) => r.users),\r\n  onlineNames: () => get('users.list', { fields: { 'username': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r) => r.users.map((u: IUserAPI) => u.username)),\r\n  onlineIds: () => get('users.list', { fields: { '_id': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r) => r.users.map((u: IUserAPI) => u._id))\r\n}\r\n"]}
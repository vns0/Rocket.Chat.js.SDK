{"version":3,"file":"messageInterfaces.js","sourceRoot":"","sources":["../../src/config/messageInterfaces.ts"],"names":[],"mappings":";AAAA,8DAA8D","sourcesContent":["/** @todo contribute these to @types/rocketchat and require */\r\n\r\nexport interface IMessage {\r\n  rid: string | null            // room ID\r\n  _id?: string                  // generated by Random.id()\r\n  t?: string                    // type e.g. rm\r\n  msg?: string                  // text content\r\n  alias?: string                // ??\r\n  emoji?: string                // emoji to use as avatar\r\n  avatar?: string               // url\r\n  groupable?: boolean           // ?\r\n  bot?: any                     // integration details\r\n  urls?: string[]               // ?\r\n  mentions?: string[]           // ?\r\n  attachments?: IMessageAttachment[]\r\n  reactions?: IMessageReaction\r\n  location ?: IMessageLocation\r\n  u?: IUser                     // User that sent the message\r\n  editedBy?: IUser              // User that edited the message\r\n  editedAt?: Date               // When the message was edited\r\n}\r\n\r\nexport interface IUser {\r\n  _id: string\r\n  username: string\r\n  name?: string\r\n}\r\n\r\nexport interface IMessageAttachment {\r\n  fields?: IAttachmentField[]\r\n  actions?: IMessageAction[]\r\n  color?: string\r\n  text?: string\r\n  ts?: string\r\n  thumb_url?: string\r\n  message_link?: string\r\n  collapsed?: boolean\r\n  author_name?: string\r\n  author_link?: string\r\n  author_icon?: string\r\n  title?: string\r\n  title_link?: string\r\n  title_link_download?: string\r\n  image_url?: string\r\n  audio_url?: string\r\n  video_url?: string\r\n}\r\n\r\nexport interface IAttachmentField {\r\n  short?: boolean\r\n  title?: string\r\n  value?: string\r\n}\r\n\r\nexport interface IMessageAction {\r\n  type?: string\r\n  text?: string\r\n  url?: string\r\n  image_url?: string\r\n  is_webview?: boolean\r\n  webview_height_ratio?: 'compact' | 'tall' | 'full'\r\n  msg?: string\r\n  msg_in_chat_window?: boolean\r\n  button_alignment?: 'vertical' | 'horizontal'\r\n  temporary_buttons?: boolean\r\n}\r\n\r\nexport interface IMessageLocation {\r\n  type: string                // e.g. Point\r\n  coordinates: string[]       // longitude latitude\r\n}\r\n\r\nexport interface IMessageReaction {\r\n  [emoji: string]: { usernames: string[] } // emoji: [usernames that reacted]\r\n}\r\n\r\nexport interface IMessageOpts {\r\n  /**\r\n   * If true, the Message class will use the legacy bot format: { i: string }.\r\n   * If false or unspecified, the class will set bot to true.\r\n   */\r\n  useLegacyBotFormat?: boolean\r\n}\r\n"]}
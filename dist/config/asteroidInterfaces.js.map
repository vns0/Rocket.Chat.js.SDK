{"version":3,"file":"asteroidInterfaces.js","sourceRoot":"","sources":["../../src/config/asteroidInterfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { EventEmitter } from 'events'\r\n// import { Map } from 'immutable'\r\n\r\n/**\r\n * Asteroid DDP - add known properties to avoid TS lint errors\r\n */\r\nexport interface IAsteroidDDP extends EventEmitter {\r\n  readyState: 1 | 0\r\n}\r\n\r\n/**\r\n * Asteroid type\r\n * @todo Update with typing from definitely typed (when available)\r\n */\r\nexport interface IAsteroid extends EventEmitter {\r\n  connect: () => Promise<void>,\r\n  disconnect: () => Promise<void>,\r\n  createUser: (usernameOrEmail: string, password: string, profile: IUserOptions) => Promise<any>\r\n  loginWithLDAP: (...params: any[]) => Promise<any>\r\n  loginWithFacebook: (...params: any[]) => Promise<any>\r\n  loginWithGoogle: (...params: any[]) => Promise<any>\r\n  loginWithTwitter: (...params: any[]) => Promise<any>\r\n  loginWithGithub: (...params: any[]) => Promise<any>\r\n  loginWithPassword: (usernameOrEmail: string, password: string) => Promise<any>\r\n  logout: () => Promise<null>\r\n  subscribe: (name: string, ...params: any[]) => ISubscription\r\n  subscriptions: ISubscription[],\r\n  call: (method: string, ...params: any[]) => IMethodResult\r\n  apply: (method: string, params: any[]) => IMethodResult\r\n  getCollection: (name: string) => ICollection\r\n  resumeLoginPromise: Promise<string>\r\n  ddp: IAsteroidDDP\r\n}\r\n\r\n/**\r\n * Asteroid user options type\r\n * @todo Update with typing from definitely typed (when available)\r\n */\r\nexport interface IUserOptions {\r\n  username?: string,\r\n  email?: string,\r\n  password: string\r\n}\r\n\r\n/**\r\n * Asteroid subscription type.\r\n * ID is populated when ready promise resolves.\r\n * @todo Update with typing from definitely typed (when available)\r\n */\r\nexport interface ISubscription {\r\n  stop: () => void,\r\n  ready: Promise<IReady>,\r\n  id?: string\r\n}\r\n\r\n// Asteroid v1 only\r\nexport interface IReady { state: string, value: string }\r\n\r\n/* // v2\r\nexport interface ISubscription extends EventEmitter {\r\n  id: string\r\n}\r\n*/\r\n\r\n/**\r\n * If the method is successful, the `result` promise will be resolved with the\r\n * return value passed by the server. The `updated` promise will be resolved\r\n * with nothing once the server emits the updated message, that tells the client\r\n * that any side-effect that the method execution caused on the database has\r\n * been reflected on the client (for example, if the method caused the insertion\r\n * of an item into a collection, the client has been notified of said\r\n * insertion).\r\n *\r\n * If the method fails, the `result` promise will be rejected with the error\r\n * returned by the server. The `updated` promise will be rejected as well\r\n * (with nothing).\r\n */\r\nexport interface IMethodResult {\r\n  result: Promise<any>,\r\n  updated: Promise<any>\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport interface ICollection {\r\n  name: string,\r\n  insert: (item: any) => ICollectionResult,\r\n  update: (id: string, item: any) => ICollectionResult,\r\n  remove: (id: string) => ICollectionResult,\r\n  reactiveQuery: (selector: object | Function) => IReactiveQuery\r\n}\r\n\r\n/**\r\n * The `local` promise is immediately resolved with the `_id` of the updated\r\n * item. That is, unless an error occurred. In that case, an exception will be\r\n * raised.\r\n * The `remote` promise is resolved with the `_id` of the updated item if the\r\n * remote update is successful. Otherwise it's rejected with the reason of the\r\n * failure.\r\n */\r\nexport interface ICollectionResult {\r\n  local: Promise<any>,\r\n  remote: Promise<any>\r\n}\r\n\r\n/**\r\n * A reactive subset of a collection. Possible events are:\r\n * `change`: emitted whenever the result of the query changes. The id of the\r\n * item that changed is passed to the handler.\r\n */\r\nexport interface IReactiveQuery {\r\n  on: (event: string, handler: Function) => void,\r\n  result: any[]\r\n}\r\n\r\n/** Credentials for Asteroid login method */\r\nexport interface ICredentials {\r\n  password: string,\r\n  username?: string,\r\n  email?: string,\r\n  ldap?: boolean,\r\n  ldapOptions?: object\r\n}\r\n"]}